package tp1.logic.gameobjects;

import tp1.logic.Direction;
import tp1.logic.Game;
import tp1.logic.Position;
import tp1.view.Messages;

public class Mario extends GameObject implements MovableObject {

	private Game game;
	private Direction direction;;
	
	
	public Mario(Game game, Position pos) {
		super();
		this.game = game;
		this.pos = pos;
		this.direction = Direction.RIGHT;
	}

	/**
	 *  En Mario.update() se deber치n considerar tres aspectos:

El movimiento autom치tico.
Las posibles acciones del jugador.
Las colisiones con otros objetos.

El movimiento autom치tico de Mario es muy parecido al de Goomba, pero con algunas diferencias:

Mario comienza caminando hacia la derecha (no hacia la izquierda).
Cuando Mario muere avisa al game de que ha muerto para que haga los ajustes necesarios:
Perder una vida. Tiene inicialmente tres vidas.
Resetear la partida. La partida termina cuando se queda sin vida mostrando el mensaje "Game over".
Adem치s de este movimiento autom치tico, en Mario.update() se deber치n procesar tambi칠n:

Las acciones a침adidas por el jugador (almacenadas en la clase ActionList).
Las colisiones con otros objetos del tablero (por ejemplo: Goombas o la puerta de salida).
Esto se ver치 en las siguientes secciones del enunciado.

	 */
	public void update() {
		
		
		Position downPos = new Position (this.pos.getRow() + 1, this.pos.getCol());
		Position nextPos = new Position (this.pos.getRow(), this.pos.getCol());
		
		
		// Si se encuentra sobre un objeto s칩lido, avanza un paso por turno en la direcci칩n actual (empieza movi칠ndose hacia la izquierda).
		if (game.solidObjectAt(downPos)){
			
			nextPos.move(this.direction);
			
			// Si choca con un objeto s칩lido o con la pared lateral del tablero, invierte su direcci칩n.
			if (game.solidObjectAt(nextPos) || nextPos.isOnBorder()) {
				if (this.direction == Direction.LEFT) {
					this.direction = Direction.RIGHT;

				} else {
					this.direction = Direction.LEFT;
					
				}
			}
			this.pos.move(this.direction);
			
		} else {
			// Si no tiene suelo debajo, cae una casilla hacia abajo hasta volver a encontrarse con un objeto s칩lido.
			do {
				this.pos.move(Direction.DOWN);
				downPos = new Position (this.pos.getRow() + 1, this.pos.getCol());
			} while (!game.solidObjectDown(downPos) && !this.pos.isOut());
			// Si sale del tablero por abajo, muere.
			if (this.pos.isOut()) {
				game.marioDies();
			}
		}
		
		
		
	}
	
	// Funci츾췁n que : devuelve el icono, 游븴, 游뛌o 游븴, seg칰n su direcci칩

	public String getIcon() {
	 
		return "";
	}
 
	// Funcion que devuelve una representaci츾췁n de Mario
	public String toString() {
	
		return Messages.MARIO_STOP;
	}

	@Override
	public void changeDirection(int dir) {
		
		switch (dir) {
		case 0:
			this.direction = Direction.RIGHT;
			break;
		case 1:
			this.direction = Direction.LEFT;
			break;
		case 2:
			this.direction = Direction.UP;
			break;
		case 3:
			this.direction = Direction.DOWN;
			break;
		case 4:
			// STOP
			break;
		}
		
	}
	
	
}
